type User {
    name: String!
    role: Int!
    email: String!
    topics: [String!]
    dailyChallengeAvailable: Boolean!
    username: String!
    roadmapsIds: [String!]
    genUsagesRemaining: Int!
    dailyChallengesRemaining: Int!
    roadmapsCreated: [String!]
    lastDailyChallenge: String
    dailyChallengeStreak: Int!
    roadmapsViewed: Int!
}


type Pagination {
    page: Int!
    perPage: Int!
    lastEvaluatedKey: AWSJSON
}

input PaginationInput {
    page: Int!
    perPage: Int!
    lastEvaluatedKey: AWSJSON
}

scalar AWSJSON

type Topic {
    name: String!
    roadmapIds: [String!]
}

type BareResponse {
    success: Boolean!
}

type Course {
    id: ID!
    title: String!
    url: String!
    description: String!
    source: String!
    difficulty: String!
    topics: [String!]!
    isFree: Boolean!
    author: String!
    duration: Int!
    language: String!
}

type Roadmap {
    id: ID!
    title: String!
    author: String!
    courses: [Course!]!
    courseIDs: [String!]!
    topics: [String!]!
    isCustom: Boolean!
    createdBy: String!
    likes: Int!
    difficulty: String!
    liked: Boolean!
    description: String!
    imageUrl: String
    authorId: String!
}

type AuthPayload {
    token: String!
}

type Problem {
    question: String!
    categories: [String!]!
    type: String!
}

input ProblemInput {
    question: String!
    categories: [String!]!
    type: String!
}

type ChallengeResponse {
    userId: ID!
    question: String!
    answer: String!
    rating: Int!
    insight: String!
    left: Int!
}

type GetCoursesOutput {
    courses: [Course!]
    pagination: Pagination
}

type Query {
    # Auth
    login(username: String!, password: String!): AuthPayload!
    getUsers: [User!]!
    getUserByName(name: String!): User!
    resendConfirmationEmail(email: String!): BareResponse!

    # Daily
    dailyChallenge(userId: String!): Problem

    # Learning
    getRoadmapById(id: ID!, userId: String!): Roadmap!
    getCourseById(id: ID!): Course!
    getAllTopics: [Topic!]!
    getCourses(userId: String!, pagination: PaginationInput): GetCoursesOutput
    getRoadmaps: [Roadmap!]!
    getCourseFeed(userId: String): [Course!]!
    getRoadmapFeed(userId: String): [Roadmap!]!
    getRoadmapsByUser(userId: String): [Roadmap!]!
}

input UserEditInput {
    name: String!
    role: Int!
    email: String!
    topics: [String!]
    dailyChallengeAvailable: Boolean!
}

type Mutation {
    # Auth
    register(username: String!, password: String!, email: String!, topics: [String!]): String!
    confirmEmail(email: String!, token: String!): BareResponse!
    sendFeedback(feedback: String!, from: String!): BareResponse!
    updateUser(input: UserEditInput!): BareResponse!

    # Daily
    dailyChallenge(username: String!, question: String!, answer: String!): ChallengeResponse!

    # Learning
    addTopics(names: [String!]!): [Topic!]!
    upsertCourse(input: CourseInput!): Course!
    upsertRoadmap(input: RoadmapInput!): Roadmap!
    courseAddedToRoadmap(courseId: ID!, roadmapId: ID!): BareResponse!
    userLikedRoadmap(userId: ID!, roadmapId: ID!): BareResponse!
    customRoadmapRequested(prompt: String, userId: String): Roadmap!
}

input QuizInput {
    id: ID!
    name: String!
    question: String!
    answer: String!
}

input LessonInput {
    id: ID!
    name: String!
    url: String!
    author: String!
}


input ContentInput {
    quiz: QuizInput
    lesson: LessonInput
}

input CourseInput {
    id: ID!
    title: String!
    url: String!
    description: String!
    source: String!
    difficulty: String!
    topics: [String!]!
    isFree: Boolean!
    author: String!
    duration: Int!
    language: String!
}

input RoadmapInput {
    id: ID!
    title: String!
    author: String!
    courseIDs: [String!]!
    topics: [String!]!
    isCustom: Boolean!
    createdBy: String!
    likes: Int!
    difficulty: String!
    description: String!
    imageUrl: String
    authorId: String!
}
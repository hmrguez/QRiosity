package resolvers

import (
	"backend/internal/graphql/generated"
	"backend/internal/graphql/models"
	"context"
	"errors"
	"fmt"
	"github.com/dgrijalva/jwt-go"
	"time"
)

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

func (r *Resolver) Mutation() generated.MutationResolver {
	return &mutationResolver{r}
}

func (r *Resolver) Query() generated.QueryResolver {
	return &queryResolver{r}
}

type mutationResolver struct{ *Resolver }

func (r *mutationResolver) AddTopics(ctx context.Context, names []string) ([]*models.Topic, error) {
	var topics []*models.Topic
	for _, name := range names {
		topics = append(topics, &models.Topic{Name: name})
	}
	if err := r.TopicRepo.Insert(ctx, topics); err != nil {
		return nil, err
	}
	return topics, nil
}

func (r *mutationResolver) Register(ctx context.Context, username string, password string, email string, topics []string) (*models.AuthPayload, error) {

	// First search for the user
	_, err := r.UserRepo.GetUserByName(username)
	if err == nil {
		return nil, errors.New("User already exists")
	}

	// If the user does not exist, create a new user
	user := models.User{
		Name:     username,
		Password: password,
		Email:    email,
		Topics:   topics,
	}

	user, err = r.UserRepo.UpsertUser(user)
	if err != nil {
		return nil, err
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"userId": user.ID,
		"exp":    time.Now().Add(time.Hour * 72).Unix(),
	})

	tokenString, err := token.SignedString(jwtSecret)
	if err != nil {
		return nil, err
	}

	return &models.AuthPayload{
		Token: tokenString,
		User:  &user,
	}, nil

}

func (r *mutationResolver) DailyChallenge(ctx context.Context, userID string, question string, answer string) (*models.ChallengeResponse, error) {
	response, err := r.ProblemRepo.SubmitChallengeResponse(userID, question, answer)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

func (r *mutationResolver) UpsertProblem(ctx context.Context, input models.ProblemInput) (*models.Problem, error) {
	problem := models.Problem{
		Question:   input.Question,
		Categories: input.Categories,
		Type:       input.Type,
	}
	upsertedProblem := r.ProblemRepo.UpsertProblem(problem)
	return &upsertedProblem, nil
}

func (r *mutationResolver) UpsertUser(ctx context.Context, input models.UserInput) (*models.User, error) {
	user := models.User{
		ID:       input.ID,
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}
	upsertedUser, err := r.UserRepo.UpsertUser(user)
	if err != nil {
		return nil, err
	}
	return &upsertedUser, nil
}

type queryResolver struct{ *Resolver }

func (r *queryResolver) GetAllTopics(ctx context.Context) ([]*models.Topic, error) {
	return r.TopicRepo.GetAllTopics(ctx)
}

func (r *queryResolver) Login(ctx context.Context, username string, password string) (*models.AuthPayload, error) {
	user, err := r.UserRepo.GetUserByName(username)
	if err != nil || user.Password != password {
		fmt.Println(username)
		fmt.Printf("Error: %v\n", err)
		fmt.Printf("User: %v\n", user)
		fmt.Printf("Password: %v\n", password)
		return nil, errors.New("invalid username or password")
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"userId": user.ID,
		"exp":    time.Now().Add(time.Hour * 72).Unix(),
	})

	tokenString, err := token.SignedString(jwtSecret)
	if err != nil {
		return nil, err
	}

	return &models.AuthPayload{
		Token: tokenString,
		User:  user,
	}, nil
}

func (r *queryResolver) GetUser(ctx context.Context, id string) (*models.User, error) {
	return r.UserRepo.GetUserByID(id)
}

func (r *queryResolver) DailyChallenge(ctx context.Context, category string) (*models.Problem, error) {
	problem, err := r.ProblemRepo.GetDailyChallenge(category)
	if err != nil {
		return nil, err
	}
	return problem, nil

}

func (r *queryResolver) GetProblems(ctx context.Context) ([]*models.Problem, error) {
	problems := r.ProblemRepo.GetProblems()
	return problems, nil
}

func (r *queryResolver) GetUsers(ctx context.Context) ([]*models.User, error) {
	users := r.UserRepo.GetUsers()
	return users, nil
}

var jwtSecret = []byte("your_secret_key")

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    topics: [String!]
    dailyChallengeAvailable: Boolean!
}

type Topic {
    name: String!
}


input UserInput {
    _id: String!
    name: String!
    email: String!
    password: String!
}


type AuthPayload {
    token: String!
    user: User!
}

type Problem {
    id: ID!
    question: String!
    categories: [String!]!
    type: String!
}

input ProblemInput {
    question: String!
    categories: [String!]!
    type: String!
}

type ChallengeResponse {
    userId: ID!
    question: String!
    answer: String!
    rating: String!
    insight: String!
}

type Query {
    getUsers: [User!]!
    getUserByName(name: String!): User!
    getProblems: [Problem!]!
    getUser(id: ID!): User
    dailyChallenge(category: String!): Problem
    login(username: String!, password: String!): AuthPayload!
    getAllTopics: [Topic!]!
}

type Mutation {
    upsertUser(input: UserInput!): User!
    upsertProblem(input: ProblemInput!): Problem!
    dailyChallenge(username: String!, question: String!, answer: String!): ChallengeResponse!
    register(username: String!, password: String!, email: String!, topics: [String!]): AuthPayload!
    addTopics(names: [String!]!): [Topic!]!
}